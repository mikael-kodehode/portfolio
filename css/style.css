* {
  box-sizing: border-box;
  /* border: red solid 2px; */
}

body {
  margin: 0;
  background-color: rgba(46, 38, 38, 1);
  color: white;
  font-size: 0.8rem;
  letter-spacing: 2px;
  font-family: 'IBM Plex Sans Thai', sans-serif;
}

/* ---------------
    TYPOGROPHY
------------------ */

h1,
h2,
.small-text {
  text-align: center;
}
h1 {
  margin-bottom: 0;
  padding: 1em;
}
h2 {
  margin: 1em auto;
}
h3 {
  font-size: 1.135rem;
}
.small-text {
  font-size: .6rem;
  padding-top: 2em;
}

/* ---------------
    LAYOUT
------------------ */
button {
  background: inherit;
  color: inherit;
  border: white 1px solid;
}
button:hover,
button:focus {
  text-decoration: underline;
  cursor: pointer;
}
button:active {
  text-decoration: none;
  color:
}
/* NAV */

.nav-ul {
  width: 20%;
  display: flex;
  margin: 0 auto;
  justify-content: center;
  padding: 0;
}

.nav-list {
  list-style-type: none;
  padding: 1em;
  margin: 0 auto;
}

.nav-link {
  color: inherit;
  text-decoration: none;
  padding: .4em 0;
}

.active-page {
  border-bottom: 2px solid white;
}

/* paragraph section */
.p-nav-ul {
  margin: 0;
  padding: 0;
}

.p-nav-list {
  display: inline-block;
  padding: 0.5em;
  cursor: pointer;
}

.active-p {
  border-bottom: 2px solid black;
}

.paragraph {
  background-color: rgba(161, 241, 0, .8);
  color: rgb(10, 8, 8);
  width: 90%;
  margin: 0;
  padding: 1em 1.5em;
  line-height: 1.3rem;
  max-width: 450px;
  transition: background-color 1s
}

.paragraph:hover {
  background-color:rgb(219, 235, 0)
}

.main-content {
  display: flex;
  align-items: center;
  flex-direction: column;
}
.container-flex {
  max-width: 600px;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}
.col {
  text-align: center;
}
.hidden {
  display: none;
}

article p {
  margin-bottom: 0;
}
.big-link {
  color: rgba(161, 241, 0, 1);
  transition: background-color 2s, color 1s;
  padding: 0.8em;
}

.big-link:hover,
.big-link:focus {
  color:rgb(10, 8, 8);
  background-color: rgba(161, 241, 0, 0.7);
}
#projects-content {
  margin-top: 2em;
}
.cv-ul {
  list-style-type: none;
}
.left-li-group {
  text-align: right;
}
.github-projects{
  padding: 0.7em;
  list-style-type: none;
}

.github-projects a{
  color: white;
}
.github-projects a:visited:hover {
  color: gray;
}
.github-projects a:hover,
.github-projects a:focus {
  color: rgba(161, 241, 0, 1);
}
.github-projects a:active {
  color: rgba(161, 241, 0, 1);
}
#cv-nav-ul {
  padding: 0;
}
.cv-nav-li{
  display: inline-block;
  margin: 0.5em;
  cursor: pointer;
}

@media (min-width: 700px) {
  .pitch-paragraph {
    font-size: 1.2rem;
  }
  body {
    font-size: 1.135rem;
  }
}

/* CUBE */
.scene,
.cube,
.cube__face {
  width: 250px;
  height: 250px;
}

.scene {
  margin: 10px;
  perspective: 400px;
}

.cube {
  position: relative;
  transform-style:preserve-3d;
  transform: translateZ(-125px);
  transition: transform 1s;
}

.cube.show-front  { transform: translateZ(-125px) rotateY(   0deg); }
.cube.show-right  { transform: translateZ(-125px) rotateY( -90deg); }
.cube.show-back   { transform: translateZ(-125px) rotateY(-180deg); }
.cube.show-left   { transform: translateZ(-125px) rotateY(  90deg); }
.cube.show-top    { transform: translateZ(-125px) rotateX( -90deg); }
.cube.show-bottom { transform: translateZ(-125px) rotateX(  90deg); }

.cube__face {
  position: absolute;
  border: 2px solid black;
  line-height: 250px;
  font-size: 1.5rem;
  font-weight: 900;
  color: black;
  text-align: center;
}

.cube__face--front  { background: hsla(  0, 100%, 50%, 0.8); }
.cube__face--right  { background: hsla( 60, 100%, 50%, 0.8); }
.cube__face--back   { background: hsla(120, 100%, 50%, 0.8); }
.cube__face--left   { background: hsla(180, 100%, 50%, 0.8); }
.cube__face--top    { background: hsla(240, 100%, 50%, 0.8); }
.cube__face--bottom { background: hsla(300, 100%, 50%, 0.8); }

.cube__face--front  { transform: rotateY(  0deg) translateZ(125px); }
.cube__face--right  { transform: rotateY( 90deg) translateZ(125px); }
.cube__face--back   { transform: rotateY(180deg) translateZ(125px); }
.cube__face--left   { transform: rotateY(-90deg) translateZ(125px); }
.cube__face--top    { transform: rotateX( 90deg) translateZ(125px); }
.cube__face--bottom { transform: rotateX(-90deg) translateZ(125px); }

label { margin-right: 10px; }

/*heartrate simulator*/

#left,
#right,
#bottom {
  background: inherit;
  position: absolute;
}
#left,
#right {
  width: 100px;
  height: 100px;
}
#right,
#bottom {
  transform: rotate(45deg)
}
#left {
  border-radius: 0 0 100px 100px;
  transform: rotate(135deg);
}

#right {
  border-radius: 100px 100px 0 0;
  left: 100px;
}

#bottom {
  top: 84px;
  left: 64px;
  width: 72px;
  height: 72px;
}

.flex {
  display: flex;
}
.heart-container {
  transform: scale(0.8);
}
#heart-element {
  width: 200px;
  height: 0;
  background: rgb(196, 32, 18);
  /* This makes me able to position the heart accuratively relative to the input range. It is built out of 3 div parts that are formed by rotating and border-radius.*/
  position: relative;
  transform-origin: center center;
  animation: container ease-out 1s infinite;
}

/* The heart's animation rate is connected to javascript */
@keyframes container {
  0% {
    transform: scale(0.3);
    background: rgb(196, 32, 18);
  }
  25% {
    transform: scale(0.35);
    background: rgb(237, 40, 5);
  }
  50% {
    transform: scale(0.335);
    background: rgb(237, 40, 5);
  }
  75% {
    transform: scale(0.4);
    background: rgb(237, 40, 5);
  }
  100% {
    transform: scale(0.3);
    background: rgb(196, 32, 18);
  }
}
